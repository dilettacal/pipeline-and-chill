"""
Trip Event Producer - Splits complete trips into individual events.

This module handles the conversion of complete trip records into individual
streaming events that can be processed in real-time.
"""

import uuid
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional

import pandas as pd
from core import CompleteTrip
from core import get_logger as get_core_logger
from kafka import KafkaProducer
from structlog import get_logger

from .events import (
    EventType,
    PaymentProcessedEvent,
    TripEndedEvent,
    TripEvent,
    TripStartedEvent,
    ZoneEnteredEvent,
    ZoneExitedEvent,
)

logger = get_core_logger("chillflow-stream.trip-event-producer")


class TripEventProducer:
    """
    Produces individual events from complete trip records.

    Takes complete trip data and splits it into realistic streaming events
    that would be generated by a real taxi system.
    """

    def __init__(self, kafka_bootstrap_servers: str = "localhost:9092"):
        """
        Initialize the trip event producer.

        Args:
            kafka_bootstrap_servers: Kafka bootstrap servers
        """
        self.kafka_producer = KafkaProducer(
            bootstrap_servers=kafka_bootstrap_servers,
            value_serializer=lambda v: v.model_dump_json().encode("utf-8"),
            key_serializer=lambda k: k.encode("utf-8") if k else None,
        )
        logger.info("Trip event producer initialized", servers=kafka_bootstrap_servers)

    def process_trip(
        self, trip: CompleteTrip, event_timestamp: Optional[datetime] = None
    ) -> List[TripEvent]:
        """
        Convert a complete trip into a sequence of events.

        Args:
            trip: Complete trip record
            event_timestamp: Override timestamp for events (default: use trip pickup time)

        Returns:
            List of events generated from the trip
        """
        events = []
        base_timestamp = event_timestamp or trip.pickup_ts

        # 1. Trip Started Event
        trip_started = TripStartedEvent(
            event_id=str(uuid.uuid4()),
            trip_key=trip.trip_key,
            event_type=EventType.TRIP_STARTED,
            timestamp=base_timestamp,
            vendor_id=trip.vendor_id,
            vehicle_id_h=trip.vehicle_id_h,
            pickup_zone_id=trip.pu_zone_id,
            passenger_count=trip.passenger_count,
        )
        events.append(trip_started)

        # 2. Zone Entered Event (pickup zone)
        zone_entered = ZoneEnteredEvent(
            event_id=str(uuid.uuid4()),
            trip_key=trip.trip_key,
            event_type=EventType.ZONE_ENTERED,
            timestamp=base_timestamp + timedelta(seconds=30),  # 30 seconds after pickup
            vendor_id=trip.vendor_id,
            vehicle_id_h=trip.vehicle_id_h,
            zone_id=trip.pu_zone_id,
        )
        events.append(zone_entered)

        # 3. Trip Ended Event
        trip_ended = TripEndedEvent(
            event_id=str(uuid.uuid4()),
            trip_key=trip.trip_key,
            event_type=EventType.TRIP_ENDED,
            timestamp=trip.dropoff_ts,
            vendor_id=trip.vendor_id,
            vehicle_id_h=trip.vehicle_id_h,
            dropoff_zone_id=trip.do_zone_id,
            trip_distance=trip.trip_distance,
            trip_duration_minutes=self._calculate_duration_minutes(trip),
        )
        events.append(trip_ended)

        # 4. Zone Exited Event (dropoff zone)
        zone_exited = ZoneExitedEvent(
            event_id=str(uuid.uuid4()),
            trip_key=trip.trip_key,
            event_type=EventType.ZONE_EXITED,
            timestamp=trip.dropoff_ts + timedelta(seconds=30),  # 30 seconds after dropoff
            vendor_id=trip.vendor_id,
            vehicle_id_h=trip.vehicle_id_h,
            zone_id=trip.do_zone_id,
        )
        events.append(zone_exited)

        # 5. Payment Processed Event
        payment_processed = PaymentProcessedEvent(
            event_id=str(uuid.uuid4()),
            trip_key=trip.trip_key,
            event_type=EventType.PAYMENT_PROCESSED,
            timestamp=trip.dropoff_ts + timedelta(minutes=1),  # 1 minute after dropoff
            vendor_id=trip.vendor_id,
            vehicle_id_h=trip.vehicle_id_h,
            fare_amount=trip.fare_amount,
            tip_amount=trip.tip_amount,
            total_amount=trip.total_amount,
            payment_type=trip.payment_type,
        )
        events.append(payment_processed)

        logger.info(
            "Generated events for trip",
            trip_key=trip.trip_key,
            event_count=len(events),
            vendor_id=trip.vendor_id,
        )

        return events

    def send_events(self, events: List[TripEvent], topic: str = "trip-events") -> Dict[str, int]:
        """
        Send events to Kafka topic.

        Args:
            events: List of events to send
            topic: Kafka topic name

        Returns:
            Dict with send statistics
        """
        sent_count = 0
        failed_count = 0

        for event in events:
            try:
                # Use trip_key as partition key for ordering
                future = self.kafka_producer.send(
                    topic,
                    key=event.trip_key,
                    value=event,
                )
                future.get(timeout=10)  # Wait for confirmation
                sent_count += 1

            except Exception as e:
                logger.error(
                    "Failed to send event",
                    event_id=event.event_id,
                    trip_key=event.trip_key,
                    error=str(e),
                )
                failed_count += 1

        logger.info(
            "Events sent to Kafka",
            topic=topic,
            sent=sent_count,
            failed=failed_count,
            total=len(events),
        )

        return {"sent": sent_count, "failed": failed_count}

    def process_trips_from_dataframe(
        self, df: pd.DataFrame, topic: str = "trip-events", batch_size: int = 100
    ) -> Dict[str, int]:
        """
        Process multiple trips from a DataFrame.

        Args:
            df: DataFrame with trip data
            topic: Kafka topic name
            batch_size: Number of trips to process per batch

        Returns:
            Dict with processing statistics
        """
        total_events = 0
        total_sent = 0
        total_failed = 0

        logger.info("Processing trips from DataFrame", total_trips=len(df), batch_size=batch_size)

        for i in range(0, len(df), batch_size):
            batch_df = df.iloc[i : i + batch_size]
            batch_events = []

            # Generate events for each trip in the batch
            for _, row in batch_df.iterrows():
                try:
                    # Convert DataFrame row to CompleteTrip
                    trip = CompleteTrip(
                        trip_key=row["trip_key"],
                        vendor_id=int(row["vendor_id"]),
                        pickup_ts=row["pickup_ts"],
                        dropoff_ts=row["dropoff_ts"],
                        pu_zone_id=int(row["pu_zone_id"]),
                        do_zone_id=int(row["do_zone_id"]),
                        passenger_count=(
                            int(row["passenger_count"])
                            if pd.notna(row["passenger_count"])
                            else None
                        ),
                        trip_distance=(
                            float(row["trip_distance"]) if pd.notna(row["trip_distance"]) else None
                        ),
                        fare_amount=(
                            float(row["fare_amount"]) if pd.notna(row["fare_amount"]) else None
                        ),
                        tip_amount=(
                            float(row["tip_amount"]) if pd.notna(row["tip_amount"]) else None
                        ),
                        total_amount=(
                            float(row["total_amount"]) if pd.notna(row["total_amount"]) else None
                        ),
                        payment_type=(
                            int(row["payment_type"]) if pd.notna(row["payment_type"]) else None
                        ),
                        vehicle_id_h=row["vehicle_id_h"],
                        created_at=row.get("created_at", datetime.now()),
                        updated_at=row.get("updated_at", datetime.now()),
                    )

                    # Generate events for this trip
                    trip_events = self.process_trip(trip)
                    batch_events.extend(trip_events)

                except Exception as e:
                    logger.error(
                        "Failed to process trip",
                        trip_key=row.get("trip_key", "unknown"),
                        error=str(e),
                    )

            # Send batch of events
            if batch_events:
                stats = self.send_events(batch_events, topic)
                total_events += len(batch_events)
                total_sent += stats["sent"]
                total_failed += stats["failed"]

            logger.info(
                "Batch processed",
                batch_num=i // batch_size + 1,
                total_batches=(len(df) + batch_size - 1) // batch_size,
                events_in_batch=len(batch_events),
                total_events=total_events,
            )

        logger.info(
            "Trip processing complete",
            total_trips=len(df),
            total_events=total_events,
            total_sent=total_sent,
            total_failed=total_failed,
        )

        return {
            "total_trips": len(df),
            "total_events": total_events,
            "sent": total_sent,
            "failed": total_failed,
        }

    def _calculate_duration_minutes(self, trip: CompleteTrip) -> Optional[float]:
        """Calculate trip duration in minutes."""
        if trip.pickup_ts and trip.dropoff_ts:
            duration = trip.dropoff_ts - trip.pickup_ts
            return duration.total_seconds() / 60
        return None

    def close(self):
        """Close Kafka producer."""
        self.kafka_producer.close()
        logger.info("Trip event producer closed")
